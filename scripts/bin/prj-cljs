#! /usr/bin/env bash

# Use like this:
# $ prj-cljs <project-name>

status_msg() {
  msg="$1"
  echo "$msg"
}

error_msg() {
  msg="$1"
  echo "ERROR: $msg"
}

init_yarn() {
  yarn init
  yarn set version berry
  echo 'nodeLinker: node-modules' >> .yarnrc.yml
}

add_yarn_deps() {
  framework="$1"

  case $framework in
    helix)
      deps_str='react react-refresh react-dom'
      ;;
    reagent)
      deps_str='react react-dom'
      ;;
  esac

  deps=($deps_str)

  yarn add --dev shadow-cljs # use-sync-external-store
  yarn add "${deps[@]}"
}

create_shadow-cljs() {
  name="$1"
  framework="$2"

  # last tested with:
  # - devtools 1.0.5
  # - reagent 1.2.0
  # - helix 0.1.10

  case $framework in
    helix)
      fw_dep='[lilactown/helix "RELEASE"]'
      devtools=$(cat <<EOF
{:reload-strategy :full
                                                    :preloads [flow-storm.api $name.dev]
                                                    :after-load $name.core/init!}
EOF
)
      ;;
    reagent)
      fw_dep='[reagent "RELEASE"]'
      devtools=$(cat <<EOF
{:after-load $name.core/init!}
EOF
)
      ;;
  esac

  tee "shadow-cljs.edn" <<EOF > /dev/null
{:source-paths ["src"]
 :dependencies [[binaryage/devtools "RELEASE"]
                [com.github.jpmonettas/flow-storm-inst "RELEASE"]
                $fw_dep] 
 :nrepl        {:port 8777}
 :builds       {:app {:target     :browser
                      :output-dir "public/js"
                      :asset-path "/js"
                      :modules    {:app {:entries [$name.core]}}
                      :devtools   $devtools}}
 
 :dev-http     {3000 {:root "public"}}}
EOF
}

create_bb-edn() {
  tee "bb.edn" <<EOF > /dev/null
{:paths ["src"]
 :tasks
 {dev   {:doc "Runs shadow-cljs build & watch with nREPL for vim-iced"
         :task (shell "iced repl --force-shadow-cljs app")}
  debug {:doc "Runs flowstorm debugger"
         :task (shell "clj -Sforce -Sdeps '{:deps {com.github.jpmonettas/flow-storm-dbg {:mvn/version "RELEASE"}}}' -X flow-storm.debugger.main/start-debugger :port 8777 :repl-type :shadow :build-id :app")}}}
EOF
}

create_src() {
  name="$1"
  nsdir="./src/$(echo $name | tr '-' '_')"
  mkdir -p $nsdir

  case $framework in
    helix)
      # Basic source files for Helix

      tee "$nsdir/core.cljs" <<EOF > /dev/null
(ns $name.core
  (:require
   [helix.core :refer [defnc fnc $ <>]]
   [helix.hooks :as hooks]
   [helix.dom :as d]
   ["react-dom/client" :as rdom]))

(defnc App
  []
  (d/div
    {:id "App"}
    (d/h1 "Hello Helix")
    (d/p "Work in progress…")))

(defonce root
  (rdom/createRoot (js/document.getElementById "app")))

(defn ^:export init! []
  (.render root ($ App)))
EOF

      tee "$nsdir/dev.cljs" <<EOF > /dev/null
(ns $name.dev
  "A place to add preloads for developer tools!"
  (:require [helix.experimental.refresh :as r]))

;; inject-hook! needs to run on application start.
;; For ease, we run it at the top level.
;; This function adds the react-refresh runtime to the page
(r/inject-hook!)

;; shadow-cljs allows us to annotate a function name with \`:dev/after-load\`
;; to signal that it should be run after any code reload. We call the \`refresh!\`
;; function, which will tell react to refresh any components which have a
;; signature created by turning on the \`:fast-refresh\` feature flag.
(defn ^:dev/after-load refresh []
  (r/refresh!))
EOF
      ;;
    reagent)
      # Basic source files for Reagent

      tee "$nsdir/core.cljs" <<EOF > /dev/null
(ns $name.core
  (:require
   [reagent.core :as r]
   [reagent.dom :as d]))

(defn App
  []
  [:div
    {:id "App"}
    [:h1 "Hello Reagent"]
    [:p "Work in progress…"]])

(defn ^:dev/after-load mount-root []
  (d/render [App]
            (.getElementById js/document "app")))

(defn ^:export init! []
  (mount-root))
EOF
      ;;
  esac

}

create_index() {
  name="$1"
  mkdir -p public/js
  tee "public/index.html" <<EOF > /dev/null
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1" name="viewport">
    <link href="/styles.css" rel="stylesheet" type="text/css">
  </head>
  <body>
    <div id="app">
      <h3>ClojureScript has not been compiled!</h3>
      <p>please run <b>npx shadow-cljs watch app</b> in order to start the compiler</p>
    </div>
    <script src="/js/app.js" type="text/javascript"></script>
    <script type="text/javascript">
      $(echo $name | tr '-' '_').core.init_BANG_();
    </script>
  </body>
</html>
EOF
}

run() {
  name="$1"
  framework="$2"

  if [ "$framework" != 'reagent' ] && [ "$framework" != 'helix' ]; then
    error_msg "Unrecognized front-end framework: $framework"
    exit 1
  fi

  mkdir "$1"
  cd "$1" || exit 1

  status_msg 'Initializing yarn…'
  init_yarn

  status_msg 'Adding yarn deps…'
  add_yarn_deps $framework

  status_msg 'Creating shadow.cljs…'
  create_shadow-cljs $name $framework

  status_msg 'Creating bb.edn…'
  create_bb-edn

  status_msg 'Creating source files…'
  create_src $name $framework

  status_msg 'Creating index.html…'
  create_index $name

  status_msg 'All done, have fun! :)'
}

run $1 $2

