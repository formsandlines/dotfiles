#+TITLE: GNU Emacs Config
#+AUTHOR: Peter Hofmann
#+DESCRIPTION: Peter’s personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

Use ~org-babel-load-file~ to reload config.

* IMPORTANT PROGRAMS TO LOAD FIRST
** Custom File

#+begin_src elisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

** Package Manager

#+begin_src elisp
(setq package-archives 
      '(("melpa" . "https://melpa.org/packages/")
        ("elpa" . "https://elpa.gnu.org/packages/")))

;;; Bootstrap use-package:
;; (package-initialize)                ; ? still needed
;; (setq use-package-always-pin "nongnu") ; ? is this important
;; (setq use-package-always-ensure t)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package)) ; ? needed
#+end_src

*vc-package integration into use-package*
- *NOTE:* remove after upgrade to /Emacs 30/, since it’s built-in there
#+begin_src elisp
(unless (package-installed-p 'vc-use-package)
  (package-vc-install "https://github.com/slotThe/vc-use-package"))
#+end_src

*use-package autoremove fix*

Custom ~package-autoremove~ that only removes packages not ~:ensure~'d in
~use-package~ declarations by building a custom list that overrides
~package-selected-packages~.

Normally, ~use-package~ should add (via ~:ensure~) auto-installed packages to
~package-selected-packages~, but it seems like they are added only as
dependencies, which causes ~package-autoremove~ to remove them, hence the fix.
- may be fixed properly in the future (hopefully?), then this snippet can be
  removed
- [[https://github.com/jwiegley/use-package/issues/870#issuecomment-771881305][Source]] (GitHub)
#+begin_src elisp
(defvar use-package-selected-packages '(use-package)
  "Packages pulled in by use-package.")
(defun use-package-autoremove ()
  "Autoremove packages not used by use-package."
  (interactive)
  (let ((package-selected-packages use-package-selected-packages))
    (package-autoremove)))

(eval-and-compile
  (define-advice use-package-handler/:ensure (:around (fn name-symbol keyword args rest state) select)
    (let ((items (funcall fn name-symbol keyword args rest state)))
      (dolist (ensure args items)
        (let ((package
	       (or (and (eq ensure t) (use-package-as-symbol name-symbol))
                   ensure)))
          (when package
            (when (consp package)
	      (setq package (car package)))
            (push `(add-to-list 'use-package-selected-packages ',package) items))))))
  (define-advice use-package-handler/:vc (:around (fn name-symbol keyword args rest state) select)
    (let ((items (funcall fn name-symbol keyword args rest state)))
      (dolist (ensure args items)
        (let ((package
	       (or (and (eq ensure t) (use-package-as-symbol name-symbol))
                   ensure)))
          (when package
            (when (consp package)
	      (setq package (car package)))
            (push `(add-to-list 'use-package-selected-packages ',package) items)))))) 
  (define-advice use-package-handler/:quelpa (:around (fn name-symbol keyword args rest state) select)
    (let ((package (pcase (car args)
                     ((pred symbolp) (car args))
                     ((pred listp) (car (car args))))))
      (cons `(add-to-list 'use-package-selected-packages ',package)
            (funcall fn name-symbol keyword args rest state)))))
#+end_src

** Includes

#+begin_src elisp
(require 'org-tempo)
;; (require 'eldoc)
#+end_src

* Personal information
#+begin_src elisp
(setq user-full-name "Peter Hofmann"
      user-mail-address "peter.hofmann@formsandlines.eu")
#+end_src

* Basic config
#+begin_src elisp
;;; There are some warnings I really can’t do anything about and they
;;; are annoying, so keep quiet
(setq warning-minimum-level :emergency)

;;; Display relative line numbers
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode 1)
(setq display-line-numbers-widen t)
(setq display-line-numbers-width-start t)
(setq display-line-numbers-width 3)

;;; Display column number in modeline
(column-number-mode 1)

;;; Highlight current line
(global-hl-line-mode 1)

;;; Disable tab insertion for indentation
(setq indent-tabs-mode nil)

;;; Set max char count for automatic line breaks
(setq-default fill-column 80) ; ! FIXME: still 70?
;;; Display vertical line at char limit
(global-display-fill-column-indicator-mode 1)
(setq display-fill-column-indicator-character 9474)
;;; Automatically insert line breaks at char limit
;; (auto-fill-mode 1)

(setq repeat-mode t)
(setq repeat-exit-key "<return>")

(setq sentence-end-double-space nil)

(setq next-screen-context-lines 4) ;; was 2

(setq blink-cursor-mode nil)

;;; Remember and get back to recently opened files
(recentf-mode 1)

;;; Remember and restore the last cursor location of opened files
(save-place-mode 1)
;;; Save and restore the state of Emacs from one session to another
(if (display-graphic-p)
    (desktop-save-mode 1)
  ;;; prevent saving/restoring the desktop in terminal mode
  (desktop-save-mode 0))

;;; Don’t pop up UI dialogs when prompting
(setq use-dialog-box nil)

;;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)
;;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)

;;; Disabled by default, but I find them useful and not confusing:
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;;; No backup files (foo.txt~):
(setq make-backup-files nil)

;;; Follow symlinks for version control:
(setq vc-follow-symlinks t)

;;; Record state of window configuration to undo/redo:
;;; - C-c <left> to undo window configuration
;;; - C-c <right> to redo
(winner-mode 1)

;;; Enable commands to move windows:
(windmove-mode 1)

;; (setq initial-major-mode 'org-mode)

;;; better mouse wheel scrolling
;;; https://stackoverflow.com/a/26053341
(setq mouse-wheel-scroll-amount '(0.07))
;;; https://stackoverflow.com/a/445881
(setq mouse-wheel-progressive-speed nil)
#+end_src

* Buffer movement
Creating some functions to allow us to easily move windows (splits) around. The
following block of code was taken from =buffer-move.el= found on the EmacsWiki:
- https://www.emacswiki.org/emacs/buffer-move.el
- [[https://gitlab.com/dwt1/configuring-emacs/-/blob/main/03-shells-terms-and-theming/config.org][Source (DistroTube)]]

#+begin_src elisp
;;;###autoload
(defun ph/buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
  ;;  "Switches between the current buffer, and the buffer above the
  ;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun ph/buf-move-down ()
  "Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun ph/buf-move-left ()
  "Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun ph/buf-move-right ()
  "Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* Window movement
#+begin_src elisp
;;; I like to scroll line-by-line
(defun ph/scroll-one-line-up () (interactive) (scroll-up 1))
(defun ph/scroll-one-line-down () (interactive) (scroll-down 1))

;;; For some reason these conflict with meow-kill:
;; (global-set-key (kbd "C-j") 'ph/scroll-one-line-up)
;; (global-set-key (kbd "C-k") 'ph/scroll-one-line-down)

(defun ph/window-half-height ()
  (max 1 (/ (1- (window-height (selected-window))) 2)))

(defun ph/scroll-up-half ()
  (interactive)
  (scroll-up (ph/window-half-height)))

(defun ph/scroll-down-half ()         
  (interactive)                    
  (scroll-down (ph/window-half-height)))

;; (global-set-key (kbd "C-j") 'ph/scroll-up-half)
;; (global-set-key (kbd "C-k") 'ph/scroll-down-half)

;; (add-hook 'org-mode-hook
;; 	  (lambda ()
;; 	    (define-key org-mode-map (kbd "C-j") 'ph/scroll-one-line-up)))
;; (add-hook 'org-mode-hook
;; 	  (lambda ()
;; 	    (define-key org-mode-map (kbd "C-k") 'ph/scroll-one-line-down)))

;; (defun my-org/insert-heading-above ()
;;   "Insert a heading above the current one and activate Evil insert mode."
;;   (interactive)
;;   (if (org-at-heading-p)
;;       (evil-first-non-blank)
;;     (org-up-element))
;;   (org-insert-heading)
;;   (evil-insert-state))

;; (evil-define-key 'normal org-mode-map (kbd "C-S-<return>")
;;  'my-org/insert-heading-above)


(defun ph/describe-keybinding (keybinding)
  (interactive "sEnter keybinding: ")
  (describe-key (kbd keybinding)))

;;; Use if a keybinding in minibuffer is not accessible from the system:
;; (setq enable-recursive-minibuffers t)  ; <-- set to nil after use!
;; (define-key minibuffer-mode-map (kbd "C-M-k") 'describe-keybinding)

#+end_src
* Keybindings
#+begin_src elisp
;; (global-set-key (kbd "C-c C-r") 'recentf-open-files)
;; (global-set-key (kbd "C-c r") 'recentf-open)

;;; because M-x is hard to reach on my keyboard:
(keymap-global-set "C-\\" #'execute-extended-command)
(keymap-global-set "C-|" #'execute-extended-command-for-buffer)
(keymap-global-set "M-+" #'toggle-input-method) ;; replacement for C-\

(global-set-key [remap list-buffers] 'ibuffer)

;;; because C-M-d activates the dictionary in MacOS (hard to change):
(keymap-global-set "C-M-'" #'down-list) 

#+end_src
* GUI tweaks
#+begin_src elisp
(setq inhibit-startup-message t)

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

* Packages
** use-package add-ons
*** diminish
Enable ~:diminish~ to hide modeline display of some minor modes:
#+begin_src elisp
(use-package diminish
  :ensure t)
#+end_src
*** vc-use-package
To prevent ~use-package-autoremove~ from deleting it.
#+begin_src elisp
;;; 
(use-package vc-use-package
  :ensure t) 
#+end_src
** Keybinding helper
*** which-key
#+begin_src elisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode 1)
  :config
  ;; (setq which-key-side-window-location 'bottom)
  ;; (setq which-key-sort-order #'which-key-key-order-alpha)
  ;; (setq which-key-sort-uppercase-first nil)
  ;; (setq which-key-add-column-padding 1)
  ;; (setq which-key-max-display-columns nil)
  ;; (setq which-key-min-display-lines 6)
  ;; (setq which-key-side-window-slot -10)
  ;; (setq which-key-side-window-max-height 0.25)
  ;; (setq which-key-idle-delay 0.8)
  ;; (setq which-key-max-description-length 25)
  ;; (setq which-key-allow-imprecise-window-fit t)
  ;; (setq which-key-separator " → ")
  )
#+end_src

*** hydra
#+begin_src elisp
(use-package hydra
  :ensure t
  :diminish
  :config
  (defhydra hydra-zoom ()
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out")
    
    ("SPC" nil "cancel"))

  (defhydra hydra-view ()
    "view"
    ;; command names strangely reversed
    ("j" ph/scroll-one-line-up "down")
    ("k" ph/scroll-one-line-down "up")
    ("v" ph/scroll-up-half "half pg down")
    ("V" ph/scroll-down-half "half pg up")
    ("d" scroll-up-command "page down")
    ("u" scroll-down-command "page up")
    
    ("c" recenter "center")
    ("t" (lambda () (interactive) (recenter 0)) "top")
    ("b" (lambda () (interactive) (recenter -1)) "bottom") ;; doesn’t work
    
    ("?" (hydra-set-property 'hydra-view :verbosity 1) :exit nil)
    ("SPC" nil "cancel"))
  ;; wrapper to hide minibuffer help since it makes movement bouncy
  (defun hydra-view-silent ()
    (interactive)
    (hydra-set-property 'hydra-view :verbosity 0)
    (hydra-view/body))

  (defhydra hydra-org (:color pink)
    "Org Mode movement"
    ;; command names strangely reversed
    ("k" org-previous-visible-heading "prev heading")
    ("K" org-backward-heading-same-level "backward heading")
    ("J" org-forward-heading-same-level "forward heading")
    ("j" org-next-visible-heading "next heading")
    
    ("u" outline-up-heading "up heading")
    ("o" org-cycle "cycle headings")
    ("c" org-shifttab "cycle all")

    ("H" org-previous-item "prev item")
    ("h" org-backward-element "backward element")
    ("l" org-forward-element "forward element")
    ("L" org-next-item "next item")

    ("f" org-narrow-to-subtree "prev heading")
    ("d" widen "next heading")

    ("?" (hydra-set-property 'hydra-org :verbosity 1) :exit nil)
    ("SPC" nil "cancel"))
  ;; wrapper to hide minibuffer help since it makes movement bouncy
  (defun hydra-org-silent ()
    (interactive)
    (hydra-set-property 'hydra-org :verbosity 0)
    (hydra-org/body))

  (defhydra hydra-window ()
    "window"
    ;; Window buffer
    ("b" switch-to-buffer)
    ("f" find-file)
    ;; Window commands
    ("c" delete-window)        ;; C-x 0
    ("d" delete-other-windows :color blue) ;; C-x 1
    ("s" split-window-below)   ;; C-x 2
    ("v" split-window-right)   ;; C-x 3
    ("w" other-window)	  ;; C-x o
    ("=" balance-windows)
    ;; Move to windows
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ;; Move windows
    ("H" ph/buf-move-left)
    ("J" ph/buf-move-down)
    ("K" ph/buf-move-up)
    ("L" ph/buf-move-right)
    ;; Resize windows
    ("C-h" shrink-window-horizontally)
    ("C-l" enlarge-window-horizontally)
    ("C-j" enlarge-window)
    ("C-k" shrink-window)

    ("SPC" nil "cancel"))
  )
#+end_src
*** meow/
**** +Custom meow commands
#+begin_src elisp
;; Let 'a' in 'normal' mode behave like 'a' in Vi:
;; - https://github.com/meow-edit/meow/discussions/497#discussioncomment-6713192
;; - unused for now, since it somehow doesn’t work with my clj-refactor
;;   hook to disable 'cljr-slash'
(defun ph/meow-append ()
  "Move to the end of selection, switch to INSERT state."
  (interactive)
  (if meow--temp-normal
      (progn
        (message "Quit temporary normal mode")
        (meow--switch-state 'motion))
    (if (not (region-active-p))
        (when (and (not (use-region-p))
                   (< (point) (point-max)))
          (forward-char 1))
      (meow--direction-forward)
      (meow--cancel-selection))
    (meow--switch-state 'insert)))

(defun ph/meow-line-append ()
  "Appends to the end of the current line."
  (interactive)
  (meow-end-of-thing (meow-line 1))
  (meow-append))

(defun ph/meow-line-insert ()
  "Inserts at the beginning (indentation) of the current line."
  (interactive)
  (meow-beginning-of-thing (meow-line 1))
  (meow-insert))

(defun ph/meow-join-with ()
  "Joins current line with line below."
  (interactive)
  (meow-join -1)
  (meow-kill))

(defun ph/meow-split-at ()
  "Splits current line at point."
  (interactive)
  (electric-newline-and-maybe-indent))

;; (defun ph/meow-search-backwards ()
;;   "Searches backwards."
;;   (interactive)
;;   (meow-search (negative-argument -1)))

(defun ph/meow-insert-exit ()
  "Switch to previous state."
  (interactive)
  (cond
   ((meow-keypad-mode-p)
    (meow--exit-keypad-state))
   ((and (meow-insert-mode-p)
         (eq meow--beacon-defining-kbd-macro 'quick))
    (setq meow--beacon-defining-kbd-macro nil)
    (meow-beacon-insert-exit))
   ((meow-insert-mode-p)
    (when overwrite-mode
      (overwrite-mode -1))
    (meow--switch-state 'normal))))

(defun ph/meow-eval-buffer (&optional buffer undef-all)
  "Conditionally evokes eval-buffer commands specific to the active
major mode or the general command if none applies."
  (interactive (list (current-buffer) (equal current-prefix-arg '(4))))
  (cond
   ((eq major-mode 'clojure-mode)
    (cider-eval-buffer buffer nil undef-all))
   ((eq major-mode 'janet-ts-mode)
    (ajrepl-send-buffer))
   (t (eval-buffer buffer))))

(defun ph/meow-eval-region (start end)
  "Conditionally evokes eval-region commands specific to the active
major mode or the general command if none applies."
  (interactive "r")
  (cond
   ((eq major-mode 'janet-ts-mode)
    (ajrepl-send-region start end))
   ((t (eval-region start end)))))

(defun ph/meow-eval-dwim (&optional start end)
  "Calls `ph/meow-eval-region' if a region is active, otherwise
calls `meow-eval-last-exp'."
  (interactive "r")
  (if (region-active-p)
      (ph/meow-eval-region start end)
    (meow-eval-last-exp)))

(defun ph/meow-change-save ()
  "Calls `meow-change-save' if a region is active, otherwise calls
`meow-change'."
  (interactive)
  (if (region-active-p)
      (meow-change-save)
    (meow-change)))

(defun ph/meow-search-reverse ()
  "Reverses the search direction from `meow-search' (like `-n')."
  (interactive)
  (meow-search -1))

#+end_src

**** +My meow things
#+begin_src elisp
(defun ph/meow-things ()
  ;; (meow-thing-register 'quoted
  ;;                      '(regexp "`" "`\\|'")
  ;;                      '(regexp "`" "`\\|'"))
  
  (meow-thing-register 'angle
                       '(pair ("<") (">"))
                       '(pair ("<") (">")))

  (setq meow-char-thing-table
	'((?f . round)
          (?d . square)
          (?s . curly)
          (?a . angle)
          (?r . string)
          (?w . paragraph)
          (?e . line)
          (?q . buffer))))
#+end_src

**** +My meow prefix bindings
#+begin_src elisp
;; prefix /
(defconst ph/meow-prefix-slash
  (list
   ;;; COMMENTS
   '("//" . meow-comment)		; nf -> nc -> /g
   
   ;;; MACROS
   '("/M" . meow-start-kmacro-or-insert-counter)
   '("/m" . meow-start-kmacro)
   '("/n" . meow-end-or-call-kmacro)
   
   ;;; REFERENCES
   '("/f" . xref-find-definitions)
   '("/F" . xref-go-back)
   '("/r" . xref-find-references)
   '("/a" . xref-find-apropos)
   '("/j" . eldoc)
   '("/R" . eglot-rename)

   ;;; WORDS
   '("/u" . upcase-dwim)
   '("/l" . downcase-dwim)
   '("/c" . capitalize-dwim)
   
   ;;; NUMBERS
   '("/+" . ph/increment-number-at-point)
   '("/-" . ph/decrement-number-at-point)

   ;;; WRAPPING
   '("/w" . ph/wrap-with-char)
   '("/W" . ph/change-wrapped-char)

   ;;; GOTO 
   '("/ge" . end-of-buffer)
   '("/gg" . beginning-of-buffer)
   '("/gl" . meow-goto-line)
   '("/gc" . move-to-column)
   '("/gp" . goto-char)

   ;;; SEARCH
   '("/v" . meow-visit)	        ; / -> ? -> / -> ns -> /s -> /v
   '("/s" . query-replace-regexp)

   ;;; EVAL
   '("/e" . ph/meow-eval-dwim)  ; just C-x C-e or ph/meow-eval-region
   '("/b" . ph/meow-eval-buffer)
   ;; '("/r" . ph/meow-eval-region)
   '("/d" . "C-M-x")  ; = eval-defun & friends
   
   ;; '("/j" . ph/meow-join-with)
   ;; '("/k" . ph/meow-split-at)
   
   ;; '("/c" . kill-ring-save)
   ;; '("/p" . yank)
   ))

;; prefix ; -> \
(defconst ph/meow-prefix-backslash
  (list
   ;;; BUFFER
   '("\\q" . meow-quit)
   '("\\w" . save-buffer)
   '("\\W" . save-some-buffers)
   '("\\r" . meow-query-replace-regexp)
   
   ;;; PROJECT
   '("\\f" . project-find-file)
   '("\\b" . project-switch-to-buffer)
   '("\\p" . project-switch-project)
   '("\\d" . project-find-dir)
   '("\\k" . project-kill-buffers)
   ;; '("\\g" . project-find-regexp)
   ;; '("\\r" . project-query-replace-regexp)
   '("\\/" . project-shell)
   '("\\g" . magit-status)))
#+end_src

**** +My meow common bindings
#+begin_src elisp
(defconst ph/meow-common
  (list
   '("M-c" . meow-clipboard-save) ;; was kill-ring-save
   '("M-x" . meow-clipboard-kill)
   '("M-v" . meow-clipboard-yank))) ;; was yank

#+end_src
**** +My meow leader bindings
#+begin_src elisp
(defun ph/meow-leader ()
  (meow-leader-define-key
   ;; Hydras
   '("w" . hydra-window/body)
   '("SPC" . hydra-view-silent) ;; v doesn’t seem to work
   '("z" . hydra-zoom/body)
   '("o" . hydra-org-silent)

   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet)

   ;; SPC j/k/l/h will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   '("l" . "H-l")
   '("h" . "H-h")
   '("v" . "H-v")
   '("V" . "H-V")
   '("{" . "H-{")
   '("}" . "H-}"))
  
   )
#+end_src
**** +My meow bindings
- modified from [[https://github.com/meow-edit/meow/issues/506#issuecomment-1730789625][Source]] (Final final version (22. Sept.))
#+begin_src elisp
(defun ph/meow-bindings ()

  ;;; INSERT STATE ;;;

  (meow-define-keys 'insert
    '("H-SPC" . meow-keypad)
    '("C-M-§" . meow-insert-exit)
    '("S-<backspace>" . ph/kill-whole-line-move-prev)
    '("C-;" . meow-symex-mode)
    '("C-]" . meow-paren-mode) ;; temporary workaround
    '("C-y" . meow-yank))
  
  (apply 'meow-define-keys 'insert ph/meow-common)

  ;;; MOTION STATE OVERWRITES ;;;

  (meow-motion-overwrite-define-key
   '("k" . meow-prev)
   '("j" . meow-next)
   '("h" . meow-left)
   '("l" . meow-right)
   '("v" . ph/scroll-up-half)
   '("V" . ph/scroll-down-half)
   '("{" . backward-paragraph)
   '("}" . forward-paragraph)
   '("<escape>" . ignore))
  
  (apply 'meow-motion-overwrite-define-key ph/meow-prefix-backslash)
  (apply 'meow-motion-overwrite-define-key ph/meow-common)

  ;;; BEACON STATE ;;;
  
  (meow-define-keys 'beacon
    '("/m" . meow-beacon-start)
    '("/e" . meow-beacon-apply-kmacro)  
    '("<escape>" . ignore))

  ;;; NORMAL STATE ;;;

  (apply 'meow-define-keys 'normal ph/meow-prefix-slash)
  (apply 'meow-define-keys 'normal ph/meow-prefix-backslash)
  (apply 'meow-define-keys 'normal ph/meow-common)
  
  (meow-define-keys 'normal
					; expansion
    '("0" . meow-expand-0)
    '("1" . meow-expand-1)
    '("2" . meow-expand-2)
    '("3" . meow-expand-3)
    '("4" . meow-expand-4)
    '("5" . meow-expand-5)
    '("6" . meow-expand-6)
    '("7" . meow-expand-7)
    '("8" . meow-expand-8)
    '("9" . meow-expand-9)
    '(";" . meow-reverse)		; ' -> ;

					; movement
    '("k" . meow-prev)
    '("j" . meow-next)
    '("h" . meow-left)
    '("l" . meow-right)

    '("v" . ph/scroll-up-half)
    '("V" . ph/scroll-down-half)

    '("n" . meow-search)		; y -> / -> ` -> / -> n
    '("N" . ph/meow-search-reverse)

					; expansion
    '("K" . meow-prev-expand)
    '("J" . meow-next-expand)
    '("H" . meow-left-expand)
    '("L" . meow-right-expand)

    '("u" . meow-back-word)
    '("U" . meow-back-symbol)
    '("o" . meow-next-word)
    '("O" . meow-next-symbol)

    '("w" . meow-mark-word)		; a -> w
    '("W" . meow-mark-symbol)		; A -> W
    '("e" . meow-line)			; s -> e
    '("E" . ph/meow-line-append)
    '("q" . meow-block)			; w -> q
    '("Q" . meow-to-block)
    '("s" . meow-join)			; q -> a -> h -> a
    '("S" . ph/meow-line-insert)        ; H -> A
    '("g" . meow-grab)			; g -> h (see undo) -> g
    '("G" . meow-pop-grab)		; G -> H -> G
    '("m" . meow-swap-grab)
    '("M" . meow-sync-grab)
    '("~" . meow-cancel-selection)	; p -> [ -> t -> h -> H -> ~
    '("`" . meow-pop-selection)		; P -> { -> T -> H -> h -> `
    '("t" . meow-transpose-sexp)
    '("T" . transpose-lines)

    '("F" . meow-till)			; x -> t -> F
    '("f" . meow-find)			; z -> f

    '("[" . meow-beginning-of-thing)	; , -> [
    '("]" . meow-end-of-thing)		; . -> ]
    '("," . meow-inner-of-thing)	; < -> ,
    '("." . meow-bounds-of-thing)	; > -> .

    '("{" . backward-paragraph)
    '("}" . forward-paragraph)

					; editing
    '("d" . meow-kill)
    '("D" . meow-kill-whole-line)
    '("S-<backspace>" . ph/kill-whole-line-move-prev)
    '("r" . ph/meow-change-save)		; f -> c -> r
    '("R" . meow-replace)
    '("x" . meow-delete)		; t -> x
    '("c" . meow-save)			; c -> y -> t -> ` -> c
    '("p" . meow-yank)			; v -> p
    '("P" . meow-yank-pop)		; V -> P

    '("i" . meow-insert)		; e -> s -> a -> i
    '("I" . meow-open-above)		; S -> R -> S -> I
    '("a" . meow-append)		; Vi-style append -> normal append
    '("A" . meow-open-below)		; E -> S -> A

    '("y" . undo-only)			; h -> g -> z -> b
    '("Y" . undo-redo)			; H -> G -> Z -> B

    '("z" . open-line)                  ; b -> z
    '("Z" . split-line)                 ; B -> Z

    '("=" . meow-indent)
    '("X" . ph/meow-join-with)

    ;; '("[" . indent-rigidly-left-to-tab-stop)
    ;; '("]" . indent-rigidly-right-to-tab-stop)


    					; special
    '("-" . negative-argument)
    '("'" . repeat)
    '("\"" . meow-end-or-call-kmacro)    
    '("C-]" . meow-paren-mode) ;; ? -> C-]
    '("C-;" . meow-symex-mode)
    '("§" . cider-doc) ;; ! replace with generic selector

					; ignore escape
    '("<escape>" . ignore)))

#+end_src

**** +My meow paren state:
#+begin_src elisp
(defun ph/meow-paren-setup ()
  (setq meow-paren-keymap (make-keymap))
  (meow-define-state paren
    "meow state for structural editing"
    :lighter " [P]"
    :keymap meow-paren-keymap)

  ;; meow-define-state creates the variable
  (setq meow-cursor-type-paren 'hollow)

  (apply 'meow-define-keys 'paren ph/meow-prefix-slash)  
  (apply 'meow-define-keys 'paren ph/meow-prefix-backslash)  
  (apply 'meow-define-keys 'paren ph/meow-common)

  (meow-define-keys 'paren
    ;; general meow keys:
    '("0" . meow-expand-0)
    '("1" . meow-expand-1)
    '("2" . meow-expand-2)
    '("3" . meow-expand-3)
    '("4" . meow-expand-4)
    '("5" . meow-expand-5)
    '("6" . meow-expand-6)
    '("7" . meow-expand-7)
    '("8" . meow-expand-8)
    '("9" . meow-expand-9)

    '("SPC" . meow-keypad)
    '("C-M-§" . meow-normal-mode)
    '("C-;" . meow-symex-mode)

    '("p" . meow-yank)
    '("P" . meow-yank-pop)
    '("y" . undo-only)
    '("Y" . undo-redo)
    ;; '("c" . meow-save)
    
    '("v" . ph/scroll-up-half)
    '("V" . ph/scroll-down-half)

    '("-" . negative-argument)
    '("'" . repeat)
    '("`" . meow-cancel-selection)
    ;; '("`" . meow-pop-selection) ;; doesn’t work with smartparens
    '(";" . meow-reverse)
    
    '("i" . meow-insert)
    '("I" . meow-open-above)
    '("a" . meow-append)
    '("A" . meow-open-below)
    
    '("r" . ph/meow-change-save)
    '("R" . meow-replace)
    
    ;; '("d" . meow-kill)

    '("n" . meow-search)
    '("F" . meow-till)
    '("f" . meow-find)
    
    '("§" . cider-doc) ;; ! replace with generic selector

    ;; '("=" . meow-indent)

    ;; paren specific:

    '("<backspace>" . sp-backward-unwrap-sexp)
    '("<escape>" . ignore)
    
    '("s" . sp-beginning-of-sexp)
    '("e" . sp-end-of-sexp)
    '("$" . ph/sp-innermost)
    '("%" . ph/sp-outermost)
    
    '("~" . exchange-point-and-mark)

    '("h" . sp-backward-sexp)
    '("H" . sp-backward-symbol)
    '("l" . sp-forward-sexp)
    '("L" . sp-forward-symbol)
    
    '("k" . sp-down-sexp)
    '("K" . sp-backward-down-sexp)
    '("j" . sp-up-sexp)
    '("J" . sp-backward-up-sexp)
    
    '("d" . ph/sp-kill-sexp-or-region)
    '("D" . sp-kill-hybrid-sexp)
    '("c" . ph/sp-copy-sexp-or-region)
    ;; '("r" . sp-change-inner)
    
    '("w" . sp-mark-sexp)
    '("W" . sp-rewrap-sexp)

    '("m" . sp-raise-sexp)
    '("M" . sp-splice-sexp)
    
    '("t" . sp-transpose-sexp)
    '("T" . sp-convolute-sexp)
    '("x" . sp-split-sexp)
    '("X" . sp-join-sexp)
    
    '("O" . sp-next-sexp)
    '("o" . sp-select-next-thing)
    '("U" . sp-previous-sexp)
    '("u" . sp-select-previous-thing)

    '("." . sp-forward-slurp-sexp)
    '(">" . sp-forward-barf-sexp)
    '("<" . sp-backward-barf-sexp)
    '("," . sp-backward-slurp-sexp)

    '("q" . sp-unwrap-sexp)
    '("Q" . sp-backward-unwrap-sexp)

    ;; smartparens automatically wraps if bracket is typed, so no binding
    ;; '("[" . sp-select-previous-thing)
    ;; '("{" . sp-select-previous-thing-exchange)
    ;; '("]" . sp-select-next-thing)
    ;; '("}" . sp-select-next-thing-exchange)

    '("=" . sp-indent-defun)

    '("//" . sp-comment)
    '("/?" . meow-comment)
    '("/d" . (lambda () (interactive) (sp-wrap-with-pair "[")))
    '("/s" . (lambda () (interactive) (sp-wrap-with-pair "{")))
    '("/f" . (lambda () (interactive) (sp-wrap-with-pair "(")))))


#+end_src
**** +My meow symex state:
#+begin_src elisp
(defun ph/meow-symex-setup ()
  (setq meow-symex-keymap (make-keymap))
  (meow-define-state symex
    "meow state for structural editing with symex"
    :lighter " [S]"
    :keymap meow-symex-keymap
    (if meow-symex-mode
	(run-hooks 'meow-symex-mode-enable-hook)))

  (add-hook 'meow-symex-mode-enable-hook
      (lambda ()
        (symex-select-nearest-in-line)
        (symex--adjust-point)
        ;; (symex-initialize)
        ))

  (add-hook 'meow-normal-mode-hook
	    (lambda ()
	      (when (and meow-normal-mode
			 (symex--overlay-active-p))
		(symex--delete-overlay))))

  (add-hook 'meow-insert-mode-hook
	    (lambda ()
	      (when (and meow-insert-mode
			 (symex--overlay-active-p))
		(symex--delete-overlay))))

  (setq meow-cursor-type-symex 'hollow)

  (apply 'meow-define-keys 'symex ph/meow-prefix-slash)  
  (apply 'meow-define-keys 'symex ph/meow-prefix-backslash)  
  (apply 'meow-define-keys 'symex ph/meow-common)

  (meow-define-keys 'symex
    
    ;; GENERAL MEOW KEYS
    '("0" . meow-expand-0)
    '("1" . meow-expand-1)
    '("2" . meow-expand-2)
    '("3" . meow-expand-3)
    '("4" . meow-expand-4)
    '("5" . meow-expand-5)
    '("6" . meow-expand-6)
    '("7" . meow-expand-7)
    '("8" . meow-expand-8)
    '("9" . meow-expand-9)

    '("SPC" . meow-keypad)
    '("C-M-§" . meow-normal-mode)

    ;; '("p" . meow-yank) ;; -> symex
    ;; '("P" . meow-yank-pop) ;; -> symex
    '("y" . undo-only)
    '("Y" . undo-redo)
    ;; '("c" . meow-save)
    
    '("v" . ph/scroll-up-half)
    '("V" . ph/scroll-down-half)

    ;; '("-" . negative-argument) ;; -> symex-splice
    '("'" . repeat)
    ;; '("`" . meow-cancel-selection) ;; -> useless here
    ;; '("`" . meow-pop-selection) ;; -> useless here
    ;; '(";" . meow-reverse) ;; -> useless here

    ;; symex has its own insert state (?)
    ;; '("i" . meow-insert)
    ;; '("I" . meow-open-above)
    ;; '("a" . meow-append)
    ;; '("A" . meow-open-below)
    ;; '("r" . ph/meow-change-save)
    ;; '("R" . meow-replace)
    
    ;; '("n" . meow-search)
    ;; '("F" . meow-till)
    ;; '("f" . meow-find)
    
    '("§" . cider-doc) ;; ! replace with generic selector

    ;; '("=" . meow-indent)


    ;; SYMEX SPECIFIC

    ;; '("<backspace>" . sp-backward-unwrap-sexp)
    ;; '("<escape>" . ignore)
    
    '("(" . symex-create-round)
    '("[" . symex-create-square)
    '("{" . symex-create-curly)
    ;; '("<" . symex-create-angled)
    
    '("h" . symex-go-backward)
    '("k" . symex-go-up)
    '("j" . symex-go-down)
    '("l" . symex-go-forward)

    '("gj" . symex-next-visual-line)
    '("gk" . symex-previous-visual-line)
    '("L" . symex-traverse-forward) ;; f -> o -> L
    '("H" . symex-traverse-backward) ;; b -> u -> H
    ;; '("C-f" . symex-traverse-forward-more)
    ;; '("C-b" . symex-traverse-backward-more)
    ;; '("O" . symex-traverse-forward-skip) ;; F -> O
    ;; '("U" . symex-traverse-backward-skip) ;; B -> U
    '("u" . symex-leap-backward) ;; C-h -> u
    '("o" . symex-leap-forward) ;; C-l -> o
    '("U" . symex-soar-backward) ;; C-M-h -> U
    '("O" . symex-soar-forward) ;; C-M-l -> O
    '("K" . symex-climb-branch) ;; C-k -> K
    '("J" . symex-descend-branch) ;; C-j -> J
    
    '("c" . symex-yank) ;; y -> c
    ;; '("C" . symex-yank-remaining) ;; Y -> C (doesn’t work)
    '("p" . ph/symex-paste-after) ;; p -> P -> p
    '("P" . ph/symex-paste-before) ;; P -> p -> P
    '("d" . symex-delete) ;; x -> d
    ;; '("D" . symex-delete-backwards) ;; X -> D
    ;; '("D" . symex-delete-remaining) ;; D -> ? (doesn’t work)
    '("r" . ph/symex-change) ;; c -> r
    ;; '("R" . ph/symex-change-remaining) ;; C -> R (doesn’t work)
    '("R" . ph/symex-replace) ;; same as change? s -> R
    '("q" . symex-change-delimiter) ;; S -> /W -> q
    '("D" . symex-clear) ;; C-- -> D
    
    '("T" . symex-shift-backward) ;; H -> T
    '("t" . symex-shift-forward) ;; L -> t
    ;; '("M-H" . symex-shift-backward-most)
    ;; '("M-L" . symex-shift-forward-most)
    '("N" . paredit-raise-sexp) ;; K -> m -> M

    '("," . symex-capture-backward) ;; C-( / C-S-h -> ,
    '("<" . symex-emit-backward) ;; C-{ / C-S-j -> <
    '(">" . symex-emit-forward) ;; C-} / C-S-k -> >
    '("." . symex-capture-forward) ;; C-) / C-S-l -> .
    '("z" . symex-swallow)
    '("Z" . symex-swallow-tail)
    
    '("/e" . ph/symex-evaluate) ;; e -> /e
    '("/E" . symex-evaluate-remaining) ;; E -> /E
    ;; '("C-M-e" . symex-evaluate-pretty)
    '("/d" . symex-evaluate-definition) ;; d -> C-d -> /d
    ;; '("M-e" . symex-eval-recursive)
    ;; '("T" . symex-evaluate-thunk)
    '(":" . eval-expression)
    
    ;; '("t" . symex-switch-to-scratch-buffer)
    ;; '("M" . symex-switch-to-messages-buffer)
    ;; '("C-r" . symex-repl) ;; r -> C-r
    ;; '("C-R" . symex-run) ;; R -> C-R
    
    '("|" . symex-split)
    '("&" . symex-join)
    '("-" . symex-splice) ;; M ?
    '(")" . symex-wrap-round)
    '("]" . symex-wrap-square)
    '("}" . symex-wrap-curly)
    ;; '(">" . symex-wrap-angled)
    '("`" . symex-cycle-quote)
    '("~" . symex-cycle-unquote)
    ;; '("`" . symex-add-quoting-level)
    ;; '("C-`" . symex-remove-quoting-level)
    
    '("E" . ph/symex-open-line-after) ;; o -> b -> n -> E
    '("S" . ph/symex-open-line-before) ;; O -> B -> N -> S
    '("C-{" . symex-insert-newline) ;; n -> C-{
    '("C-}" . symex-append-newline) ;; C-S-o -> C-}
    '("X" . symex-join-lines) ;; J -> X
    ;; '("M-J" . symex-collapse)
    '("M-<" . symex-collapse)
    '("M->" . symex-unfurl)
    ;; '("C-M-<" . symex-collapse-remaining)
    ;; '("C-M->" . symex-unfurl-remaining)
    '("x" . symex-join-lines-backwards) ;; N -> x
    
    '("s" . symex-goto-first) ;; 0 / M-h -> s
    '("e" . symex-goto-last) ;; $ / M-l -> e
    '("n" . symex-goto-lowest) ;; M-j -> S -> n
    '("m" . symex-goto-highest) ;; M-k -> E -> m
    
    '("=" . symex-tidy)
    '("<tab>" . symex-tidy)
    ;; '("C-=" . symex-tidy-remaining)
    ;; '("C-<tab>" . symex-tidy-remaining)
    ;; '("M-=" . symex-tidy-proper)
    ;; '("M-<tab>" . symex-tidy-proper)
    
    '("A" . ph/symex-append-after)
    '("a" . ph/symex-insert-at-end)
    '("i" . ph/symex-insert-at-beginning)
    '("I" . ph/symex-insert-before)
    '("w" . ph/symex-wrap)
    '("W" . ph/symex-wrap-and-append)
    
    ;; '("g" . evil-jump-to-tag) ;; -> prefix command
    ;; '("G" . evil-jump-backward) ;; -> prefix command
    
    '(";" . symex-comment)
    ;; '("M-;" . symex-comment-remaining) ;; -> doesn’t work
    ;; '("C-;" . symex-eval-print)
    
    ;; canonical action
    ;; '("s-;" . symex-evaluate)
    
    ;; configuration
    ;; '("H-h" . symex--toggle-highlight)
    
    ;; '("C-e" . symex--scroll-down)
    ;; '("C-y" . symex--scroll-up)
    
    ;; standard exits
    ;; '("?" . symex-describe)
    ;; '("<return>" . symex-enter-lower)
    ;; '("<escape>" . symex-escape-higher)
    ;; '("C-g" . symex-escape-higher)


    )
  )
#+end_src

**** meow
#+begin_src elisp
(use-package meow
  :ensure t
  :demand t
  :after (hydra clj-refactor symex)
  :config
  (meow-global-mode 1)
  (meow-setup-indicator)

  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)

  ;;; Prevent 'C-[' from triggering 'ESC' prefix-keymaps:
  ;;; see:
  ;;; https://github.com/meow-edit/meow/discussions/255#discussioncomment-2862406
  (define-key input-decode-map [?\C-\[] [C-\[])
  (define-key global-map [C-\[] [?\C-\M-§])
  
  ;;; Prevent 'C-i' and 'C-I' from acting as 'TAB' and 'S-TAB':
  ;; (define-key input-decode-map [?\C-i] [C-i])
  ;; (define-key input-decode-map [?\C-\S-i] [C-S-i])

  (ph/meow-things)
  (ph/meow-paren-setup)
  (ph/meow-symex-setup)
  (ph/meow-leader)
  (ph/meow-bindings)

  (add-hook 'meow-paren-mode-hook
	    (lambda () (keymap-unset clj-refactor-map "/")))
  (add-hook 'meow-symex-mode-hook
	    (lambda () (keymap-unset clj-refactor-map "/")))
  (add-hook 'meow-normal-mode-hook
	    (lambda () (keymap-unset clj-refactor-map "/")))
  (add-hook 'meow-insert-mode-hook
	    (lambda () (keymap-set clj-refactor-map "/" #'cljr-slash))))
#+end_src
** Version control
*** magit
#+begin_src elisp
(use-package magit
  :ensure t)

#+end_src
*** diff-hl
#+begin_src elisp
(use-package diff-hl
  :after (magit dired)
  :ensure t
  :diminish
  :init
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  :config
  (global-diff-hl-mode)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode))

#+end_src

** OrgMode
*** org /(built-in)/
#+begin_src elisp
(use-package org
  :config
  ;;; Hide emphasis marker characters
  (setq org-use-speed-commands t)

  ;;; Enable org-indent-mode on startup
  (setq org-startup-indented t)

  (setq org-hide-emphasis-markers t)
  ;;; Show entities as UTF8 characters
  (setq org-pretty-entities t)

  ;; (setq org-startup-with-latex-preview t)

  ;; (setq org-edit-src-content-indentation 0)
  (setq org-src-preserve-indentation t))
#+end_src
*** +My list editing improvements

*** +My fix for ~org-fill-paragraph~ in ~org-indent-mode~

Fix for ~org-fill-paragraph~ in ~org-indent-mode~, which fails to integrate
the indentation. Overrides ~current-fill-column~ to ensure the correct
calculation.
- credits to patrick: https://emacs.stackexchange.com/a/74973

#+begin_src elisp
(defun current-fill-column ()
      "Return the fill-column to use for this line.
Subtracts right margin and org indentation level from fill-column"
      (let ((indent-level (if (bound-and-true-p org-indent-mode)
                              (* org-indent-indentation-per-level
                                 (org-current-level))
                            0))
            (margin (or (get-text-property (point) 'right-margin) 0)))
        (- fill-column indent-level margin)))
#+end_src

*** org-appear
#+begin_src elisp
(use-package org-appear
  :ensure t
  :diminish
  :after org
  :hook org-mode
  :config
  (setq org-appear-autoentities t)
  (setq org-appear-autolinks t)
  (setq org-appear-autosubmarkers t))
#+end_src
*** COMMENT org-autolist
#+begin_src elisp
(use-package org-autolist
  :diminish
  :ensure t
  :after org
  :hook (org-mode . org-autolist-mode))
#+end_src
*** COMMENT org-excalidraw
Doesn’t work - wait for updates, especially on [[https://github.com/wdavew/org-excalidraw/pull/6][this PR]].
- can only open links in Excalidraw, but not display images
- generates svg though
#+begin_src elisp
(use-package org-excalidraw
  :ensure t
  :vc (:fetcher github :repo wdavew/org-excalidraw)
  :config
  (setq org-excalidraw-directory "~/Pictures/org-excalidraw")
  
  (file-notify-add-watch org-excalidraw-directory '(change)
			 'org-excalidraw--handle-file-change)
  ;; (add-to-list 'org-file-apps
  ;; 	       '("\\.excalidraw.svg\\'" . (lambda (path link)
  ;; 					    (org-excalidraw--open-file-from-svg
  ;; 					     path))))
  )
#+end_src

** Snippets
*** yasnippet
#+begin_src elisp
(use-package yasnippet
  :ensure t
  :diminish
  :config
  (yas-global-mode 1))
#+end_src

** Appearance
*** COMMENT rainbow-mode
#+begin_src elisp
(use-package rainbow-mode
  :ensure t
  :diminish
  :hook org-mode prog-mode)
#+end_src

*** COMMENT gruvbox-theme
#+begin_src elisp
(use-package gruvbox-theme
  :ensure t
  :config
  (load-theme 'gruvbox))

;;; good theme for customization
;; (load-theme 'modus-vivendi)
#+end_src

** Popup windows
*** popper
#+begin_src elisp
(use-package popper
  :ensure t
  :bind (("C-`"   . popper-toggle)
         ("M-§"   . popper-cycle) ;; was handle-switch-frame
         ("C-M-`" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
	  "\\*cider-doc\\*"
          help-mode
          compilation-mode))
  (popper-mode +1)
  (popper-echo-mode +1)
  :config
  )
#+end_src

** Completion
*** marginalia (minibuffer completion)
#+begin_src elisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :ensure t
  :bind (:map minibuffer-local-map
	      ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode)

  :config
  (setq marginalia-field-width 80) ; 43 in Doom
  
  (add-hook 'icomplete-minibuffer-setup-hook
	    (lambda () (setq truncate-lines t)))
  
  (add-hook 'completion-list-mode-hook
	    (lambda () (setq truncate-lines t)))

  ;;; Disable Marginalia in *completions* buffer for non-one-column formats
  ;; -> doesn’t work
  ;; - https://github.com/minad/marginalia/issues/129
  ;; (defun disable-marginalia ()
  ;;   (when (and (equal t fido-mode)
  ;; 	       (not (eq completions-format 'one-column)))
  ;;     (setq-local marginalia-annotator-registry nil)))
  ;; (add-hook 'completion-list-mode-hook #'disable-marginalia)
  )
#+end_src

*** company (text completion)
#+begin_src elisp
(use-package company
  :ensure t
  :defer t
  :diminish
  :init (add-hook 'after-init-hook 'global-company-mode))

;;; ? needed
;; (use-package company-box
;;   :after company
;;   :diminish
;;   :hook (company-mode . company-box-mode))
#+end_src

** Cross-references
*** COMMENT dumb-jump (jump to definition, etc. (file searchers for xref)
Needed because eglot?
#+begin_src elisp
(use-package dumb-jump
  :ensure t
  :diminish
  :init (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))

;;; Compiler Warnings:
;; Warning (bytecomp): ‘point-at-bol’ is an obsolete function (as of 29.1); use ‘line-beginning-position’ or ‘pos-bol’ instead.
;; Warning (bytecomp): the function ‘xref-make-file-location’ is not known to be defined.
;; Warning (bytecomp): the function ‘xref-make’ is not known to be defined.
;; Warning (bytecomp): the function ‘first’ is not known to be defined.
;; Warning (bytecomp): the function ‘tramp-dissect-file-name’ is not known to be defined.
;; Warning (bytecomp): the function ‘tramp-file-name-localname’ is not known to be defined.
;; Warning (bytecomp): the function ‘helm-make-source’ is not known to be defined.
;; Warning (bytecomp): the function ‘ivy-read’ is not known to be defined.
#+end_src

** Linter
*** flycheck/
**** COMMENT +My flycheck-prefer-eldoc
Source: [[https://www.masteringemacs.org/article/seamlessly-merge-multiple-documentation-sources-eldoc][masteringemacs]]
#+begin_src elisp
(defun ph/flycheck-eldoc (callback &rest _ignored)
  "Print flycheck messages at point by calling CALLBACK."
  (when-let ((flycheck-errors (and flycheck-mode (flycheck-overlay-errors-at (point)))))
    (mapc
     (lambda (err)
       (funcall callback
		(format "%s: %s"
			(let ((level (flycheck-error-level err)))
			  (pcase level
			    ('info (propertize "I" 'face 'flycheck-error-list-info))
			    ('error (propertize "E" 'face 'flycheck-error-list-error))
			    ('warning (propertize "W" 'face 'flycheck-error-list-warning))
			    (_ level)))
			(flycheck-error-message err))
		:thing (or (flycheck-error-id err)
			   (flycheck-error-group err))
		:face 'font-lock-doc-face))
     flycheck-errors)))

(defun ph/flycheck-prefer-eldoc ()
  (add-hook 'eldoc-documentation-functions #'ph/flycheck-eldoc nil t)
  (setq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
  (setq flycheck-display-errors-function nil)
  (setq flycheck-help-echo-function nil))

#+end_src
**** flycheck
#+begin_src elisp
(use-package flycheck
  :ensure t
  :defer t
  :after eldoc
  :diminish
  :init (global-flycheck-mode)
  ;; :hook ((flycheck-mode . ph/flycheck-prefer-eldoc))
  )
#+end_src
**** flycheck-color-mode-line
#+begin_src elisp
(use-package flycheck-color-mode-line
  :ensure t
  :diminish
  :after flycheck
  :hook flycheck-mode)
#+end_src
**** flycheck-clj-kondo
#+begin_src elisp
(use-package flycheck-clj-kondo
  :ensure t
  :after (flycheck clojure-mode)
  :diminish
  :config
  ;; ? how to disable elisp undefined warnings
  )
#+end_src
**** flycheck-janet
#+begin_src elisp
(use-package flycheck-janet
  :ensure t
  :after (flycheck janet-ts-mode)
  :diminish
  :vc (:fetcher github :repo sogaiu/flycheck-janet))
#+end_src
**** flycheck-rjan (for Janet)
#+begin_src elisp
(use-package flycheck-rjan
  :ensure t
  :after (flycheck janet-ts-mode flycheck-janet)
  :diminish
  :vc (:fetcher github :repo sogaiu/flycheck-rjan)
  :config
  (flycheck-add-next-checker 'janet-rjan 'janet-janet))
#+end_src
** Structural editing
*** smartparens
#+begin_src elisp
(use-package smartparens
  :ensure t
  :after janet-ts-mode
  :init (require 'smartparens-config)
  :config
  (smartparens-global-mode t) ;; These options can be t or nil.
  (show-smartparens-global-mode t)
  (setq sp-show-pair-from-inside t)
  
  (sp-with-modes 'janet-ts-mode
    (sp-local-pair "'" nil :actions nil))

  ;; (sp-pair "`" "`")
  ;; (sp-pair "$" "$")
  )
#+end_src

Custom commands:
#+begin_src elisp
(defun ph/sp-outermost ()
  "Moves outside to top-level sexp."
  (interactive)
  (let ((res (sp-up-sexp)))
    (while res
      (setq res (sp-up-sexp)))))

;; (defun ph/sp-outermost ()
;;   "Moves outside to top-level sexp."
;;   (interactive)
;;   (sp-up-sexp '(-4)))

(defun ph/sp-innermost ()
  "Moves to the leftmost-innermost sexp."
  (interactive)
  (sp-down-sexp '(4)))

(defun ph/sp-kill-sexp-or-region (beg end &optional arg dont-kill)
  "Selects the appropriate kill function from Smartparens by
chacking if a region is active or not."
  (interactive "rP")
  (if (region-active-p)
      (sp-kill-region beg end)
    (sp-kill-sexp arg dont-kill)))

(defun ph/sp-copy-sexp-or-region (beg end &optional arg)
  "Selects the appropriate kill/copy function from Smartparens by
chacking if a region is active or not."
  (interactive "rP")
  (if (region-active-p)
      (meow-save)
    (sp-kill-sexp arg t)))

#+end_src
*** symex/
**** symex replacements with meow insert (workaround)
Symex’s insert-related commands do not interface with meows insert
state, so I copied the relevant parts from source, using ~meow-insert~
instead.
- *Note:* this may become obsolete with further development and
  decoupling in symex
#+begin_src elisp

(defun ph/symex-ts-insert-at-end ()
  "Insert at end of symex."
  (interactive)
  (when (symex-ts-get-current-node)
    (goto-char (tsc-node-end-position (symex-ts-get-current-node)))
    ;; (evil-insert-state)
    (meow-insert)))

(defun ph/symex-lisp--insert-at-end ()
  "Insert at end of symex."
  (interactive)
  (if (or (lispy-left-p)
          (symex-string-p))
      (progn (forward-sexp)
             (backward-char))
    (forward-sexp))
  ;; (symex-enter-lowest)
  (meow-insert))

(defun ph/symex-insert-at-end ()
  "Insert at end of symex."
  (interactive)
  (if (symex-tree-sitter-p)
      (ph/symex-ts-insert-at-end)
    (ph/symex-lisp--insert-at-end)))


(defun ph/symex-ts-insert-at-beginning ()
  "Insert at beginning of symex."
  (interactive)
  (when (symex-ts-get-current-node)
    (goto-char (tsc-node-start-position (symex-ts-get-current-node)))
    ;; (evil-insert-state)
    (meow-insert)))

(defun ph/symex-lisp--insert-at-beginning ()
  "Insert at beginning of symex."
  (interactive)
  (when (or (lispy-left-p)
            (symex-string-p))
    (forward-char))
  ;; (symex-enter-lowest)
  (meow-insert))

(defun ph/symex-insert-at-beginning ()
  "Insert at beginning of symex."
  (interactive)
  (if (symex-tree-sitter-p)
      (ph/symex-ts-insert-at-beginning)
    (ph/symex-lisp--insert-at-beginning)))


(defun ph/symex-ts-append-after ()
  "Append after symex (instead of vim's default of line)."
  (interactive)
  (when (symex-ts-get-current-node)
    (goto-char (tsc-node-end-position (symex-ts-get-current-node)))
    (insert " ")
    ;; (evil-insert-state)
    (meow-insert)))

(defun ph/symex-lisp--append-after ()
  "Append after symex (instead of vim's default of line)."
  (interactive)
  (forward-sexp)  ; selected symexes will have the cursor on the starting paren
  (insert " ")
  ;; (symex-enter-lowest)
  (meow-insert))

(defun ph/symex-append-after ()
  "Append after symex (instead of vim's default of line)."
  (interactive)
  (if (symex-tree-sitter-p)
      (ph/symex-ts-append-after)
    (ph/symex-lisp--append-after)))


(defun ph/symex-ts-insert-before ()
  "Insert before symex (instead of vim's default at the start of line)."
  (interactive)
  (when (symex-ts-get-current-node)
    (goto-char (tsc-node-start-position (symex-ts-get-current-node)))
    (insert " ")
    (backward-char)
    ;; (evil-insert-state)
    (meow-insert)))

(defun ph/symex-lisp--insert-before ()
  "Insert before symex (instead of vim's default at the start of line)."
  (interactive)
  (insert " ")
  (backward-char)
  ;; (symex-enter-lowest)
  (meow-insert))

(defun ph/symex-insert-before ()
  "Insert before symex (instead of vim's default at the start of line)."
  (interactive)
  (if (symex-tree-sitter-p)
      (ph/symex-ts-insert-before)
    (ph/symex-lisp--insert-before)))


(defun ph/symex-wrap ()
  "Wrap with containing symex."
  (interactive)
  (symex-wrap-round)
  (ph/symex-insert-at-beginning))


(defun ph/symex-wrap-and-append ()
  "Wrap with containing symex and append."
  (interactive)
  (symex-wrap-round)
  (ph/symex-insert-at-end))


(defun ph/symex-ts-change-node-forward (&optional count)
  "Delete COUNT nodes forward from the current node and enter Insert state."
  (interactive "p")
  (save-excursion (symex-ts-delete-node-forward count t))
  ;; (evil-insert-state 1)
  (meow-insert))

(defun ph/symex-lisp--change (count)
  "Change COUNT symexes."
  (interactive "p")
  (let ((start (point))
        (end (symex--get-end-point count)))
    (kill-region start end))
  ;; (symex-enter-lowest)
  (meow-insert))

(defun ph/symex-change (count)
  "Change COUNT symexes."
  (interactive "p")
  (if (symex-tree-sitter-p)
      (ph/symex-ts-change-node-forward count)
    (ph/symex-lisp--change count)))


(defun ph/symex-change-remaining ()
  "Change remaining symexes at this level."
  (interactive)
  (let ((count (symex--remaining-length)))
    (ph/symex-change count)))


(defun ph/symex-ts-replace ()
  "Replace contents of symex."
  (when symex-ts--current-node
    (let* ((child-count (tsc-count-named-children symex-ts--current-node))

           ;; Get new position for insertion: if the node has children
           ;; then the start of the first child node, otherwise the
           ;; current point.
           (new-pos (if (> child-count 0)
                        (tsc-node-start-position (tsc-get-nth-named-child symex-ts--current-node 0))
                      (point))))

      (symex-ts-clear)
      (goto-char new-pos)
      ;; (evil-insert-state 1)
      (meow-insert))))

(defun ph/symex-replace ()
  "Replace contents of symex."
  (interactive)
  (if (symex-tree-sitter-p)
      (ph/symex-ts-replace)
    (progn (symex--clear)
           (when (or (symex-form-p) (symex-string-p))
             (forward-char))
           ;; (symex-enter-lowest)
	   (meow-insert))))


(defun ph/symex-ts-open-line-after ()
  "Open new line after symex."
  (interactive)
  (when (symex-ts-get-current-node)
    (goto-char (tsc-node-end-position (symex-ts-get-current-node)))
    (newline-and-indent)
    ;; (evil-insert-state)
    (meow-insert)))

(defun ph/symex-lisp--open-line-after ()
  "Open new line after symex."
  (interactive)
  (forward-sexp)
  (newline-and-indent)
  ;; (symex-enter-lowest)
  (meow-insert))

(defun ph/symex-open-line-after ()
  "Open new line after symex."
  (interactive)
  (if (symex-tree-sitter-p)
      (ph/symex-ts-open-line-after)
    (ph/symex-lisp--open-line-after)))


(defun ph/symex-ts-open-line-before ()
  "Open new line before symex."
  (interactive)
  (when (symex-ts-get-current-node)
    (goto-char (tsc-node-start-position (symex-ts-get-current-node)))
    (newline-and-indent)
    (evil-previous-line)
    (indent-according-to-mode)
    ;; (evil-append-line 1)
    (meow-insert))) ;; ! incorrect command mapping from append-line

(defun ph/symex-lisp--open-line-before ()
  "Open new line before symex."
  (interactive)
  (newline-and-indent)
  (evil-previous-line)
  (indent-according-to-mode)
  (evil-move-end-of-line)
  (unless (or (symex--current-line-empty-p)
              (save-excursion (backward-char)
                              (lispy-left-p)))
    (insert " "))
  ;; (symex-enter-lowest)
  (meow-insert))

(defun ph/symex-open-line-before ()
  "Open new line before symex."
  (interactive)
  (if (symex-tree-sitter-p)
      (ph/symex-ts-open-line-before)
    (ph/symex-lisp--open-line-before)))
#+end_src
**** symex replacements for eval
#+begin_src elisp
(defun ph/symex-eval-janet ()
  "Eval last sexp."
  (interactive)
  (ajrepl-send-expression-at-point))

;; changed significantly (trimmed down)
(defun ph/symex--evaluate ()
  "Evaluate symex."
  (save-excursion
    (forward-sexp)
    (cond ((equal major-mode 'janet-ts-mode)
	   (ph/symex-eval-janet))
	  ((member major-mode symex-racket-modes)
	   (symex-eval-racket))
	  ((member major-mode symex-elisp-modes)
	   (symex-eval-elisp))
	  ((equal major-mode 'scheme-mode)
	   (symex-eval-scheme))
	  ((member major-mode symex-clojure-modes)
	   (symex-eval-clojure))
	  ((member major-mode symex-common-lisp-modes)
	   (symex-eval-common-lisp))
	  ((equal major-mode 'arc-mode)
	   (symex-eval-arc))
	  (t (error "Symex mode: Lisp flavor not recognized!")))))

(defun ph/symex-evaluate (count)
  "Evaluate COUNT symexes."
  (interactive "p")
  (save-excursion
    (let ((i 0)
          (movedp t))
      (while (or (not movedp)
                 (< i count))
        (ph/symex--evaluate)
        (symex--go-forward)
        (setq i (1+ i))))))
#+end_src
**** symex replacements for copy/paste
#+begin_src elisp
;; ! may need adjustment
(defun ph/symex-ts--paste (count direction)
  "Paste before or after symex, COUNT times, according to DIRECTION.

DIRECTION should be either the symbol `before' or `after'."
  (interactive)
  (when (symex-ts-get-current-node)
    (symex-ts--handle-tree-modification
     (let* ((node (symex-ts-get-current-node))
	    (start (tsc-node-start-position node))
	    (end (tsc-node-end-position node))
	    (indent-start (save-excursion (back-to-indentation) (point)))
	    (block-node (or (not (= (line-number-at-pos start)
				    (line-number-at-pos end)))
			    (and (= start indent-start)
				 (= end (line-end-position))))))
       (goto-char (if (eq direction 'before) start end))
       (dotimes (_ count)
	 (when (eq direction 'after) (insert (if block-node "\n" " ")))
	 ;; (yank)
	 (meow-yank)
	 (when (eq direction 'before) (insert (if block-node "\n" " "))
	       (indent-according-to-mode)))))))


(defun ph/symex-ts-paste-before (count)
  "Paste before symex, COUNT times."
  (interactive)
  (ph/symex-ts--paste count 'before))

(defun ph/symex-lisp--paste-before ()
  "Paste before symex."
  (interactive)
  (let ((extra-to-append
         (cond ((or (and (symex--point-at-indentation-p)
                         (not (bolp)))
                    (save-excursion (forward-sexp)
                                    (eolp)))
                "\n")
               (t " "))))
    (save-excursion
      ;; (save-excursion
      ;;   (evil-paste-before nil nil)
      ;;   (when evil-move-cursor-back
      ;;     (forward-char))
      ;;   (insert extra-to-append))
      (meow-yank) ;; ++
      (insert extra-to-append) ;; ++
      (symex--go-forward)
      ;; (symex-tidy)
      )
    (symex-tidy)))

(defun ph/symex-paste-before (count)
  "Paste before symex, COUNT times."
  (interactive "p")
  (setq this-command 'meow-yank) ;; 'evil-paste-before
  (if (symex-tree-sitter-p)
      (ph/symex-ts-paste-before count)
    (symex--with-undo-collapse
      (dotimes (_ count)
        (ph/symex-lisp--paste-before)))))


(defun ph/symex-ts-paste-after (count)
  "Paste after symex, COUNT times."
  (interactive)
  (ph/symex-ts--paste count 'after))

(defun ph/symex-lisp--paste-after ()
  "Paste after symex."
  (interactive)
  (let ((extra-to-prepend
         (cond ((or (and (symex--point-at-indentation-p)
                         (not (bolp)))
                    (save-excursion (forward-sexp)
                                    (eolp)))
                "\n")
               (t " "))))
    (save-excursion
      (forward-sexp)
      (insert extra-to-prepend)
      ;; (evil-paste-before nil nil)
      (meow-yank))
    (symex--go-forward)
    (symex-tidy)))

(defun ph/symex-paste-after (count)
  "Paste after symex, COUNT times."
  (interactive "p")
  (setq this-command 'meow-yank) ;; 'evil-paste-after
  (if (symex-tree-sitter-p)
      (ph/symex-ts-paste-after count)
    (symex--with-undo-collapse
      (dotimes (_ count)
        (ph/symex-lisp--paste-after)))))

#+end_src
**** symex
Issues waiting to be resolved (maybe in 2.0 release?):
- remove tree-sitter dependency (this is now built-in in Emacs 29+)
- remove evil dependency (no need for that with meow)
- hopefully trim other dependencies like lispy too

[[https://github.com/drym-org/symex.el/blob/c3f000e037c62523267d3a89f14ac24cd8acc9fb/symex-hydra.el][Example-integration of symex with hydra]]
- also see [[https://github.com/drym-org/symex.el/pull/118][Replace evil -- first pass #118 (GitHub)]]

#+begin_src elisp
(use-package symex
  :ensure t
  :after janet-ts-mode
  :config
  (symex-initialize)
  ;; (global-set-key (kbd "s-;") 'symex-mode-interface)

  ;; (setq symex-highlight-p nil)

  ;;; symex-mode has functions that react on tree-sitter-mode with different
  ;;; implementations, possibly breaking my meow integration, so I overwrite
  ;;; the predicate to check for that to prevent activation.
  (defvar ph/symex-use-tree-sitter nil)
  ;;; !! overwrite
  (defun symex-tree-sitter-p ()
    "Whether to use the tree sitter primitives."
    (and ph/symex-use-tree-sitter
	 tree-sitter-mode
	 ;; We use the Lisp primitives for Clojure
	 ;; even though Emacs 29 provides tree-sitter APIs
	 ;; for it, since the Lisp primitives in Symex are
	 ;; more mature than the Tree Sitter ones at the
	 ;; present time.
	 (not (member major-mode symex-clojure-modes))))

  )
#+end_src

*** COMMENT lispy
#+begin_src elisp
(use-package lispy
  :ensure t
  :hook ((emacs-lisp-mode clojure-mode lisp-mode) . lispy-mode)
  ;; :config
  ;; (eval-after-load "lispy"
  ;;   `(progn
  ;;      (lispy-define-key lispy-mode-map "S" 'special-lispy-visit)))
  )
#+end_src
** tree-sitter/
*** tree-sitter /(built-in)/
Part of core since Emacs 29, so no need to install.

*** tree-sitter-janet-simple
#+begin_src elisp
(setq treesit-language-source-alist
      '((janet-simple
	 . ("https://github.com/sogaiu/tree-sitter-janet-simple"))))

;;; ? how to make sure it’s not already installed
;; (treesit-install-language-grammar 'janet-simple)
#+end_src
** LSP support
*** eldoc /(built-in -> shadowed)/
- installed manually from ~describe-package eldoc~, because built-in version
  is outdated
  - somehow Emacs still uses the built-in version instead of the newer
    one, cannot fix this with the obvious approaches, no luck finding
    answers or asking AI
  - see https://elpa.gnu.org/packages/eldoc.html
#+begin_src elisp
  (use-package eldoc
    :ensure t
    :pin elpa
    :config
    ;; ? enabled by default
    ;; (global-eldoc-mode 1)
    
    ;; ? does this work
    ;; Source: https://github.com/joaotavora/eglot/discussions/1328#discussioncomment-7787866
 ;;    (defun eldoc-fancy (arg)
 ;;      "`eldoc' but uses the echo area by default and a prefix
 ;; will swap to a buffer."
 ;;      (interactive "P")
 ;;      (let ((eldoc-display-functions
 ;;             (if arg '(eldoc-display-in-buffer) '(eldoc-display-in-echo-area))))
 ;; 	(eldoc t)))


    (add-to-list 'display-buffer-alist
		 '("^\\*eldoc" display-buffer-at-bottom
		   (window-height . 4)))


    ;;; use `eldoc-doc-buffer'
    ;; (setq eldoc-echo-area-prefer-doc-buffer t)
  
    ;;; see https://github.com/joaotavora/eglot/discussions/734
    ;; (setq eldoc-echo-area-use-multiline-p nil)
    )

#+end_src
*** COMMENT eldoc-box
#+begin_src elisp
(use-package eldoc-box
  :ensure t
  :after eldoc
  :diminish
  :config
  )
#+end_src
*** COMMENT +My eglot-eldoc
Source: [[https://www.masteringemacs.org/article/seamlessly-merge-multiple-documentation-sources-eldoc][masteringemacs]]
#+begin_src elisp
(defun ph/eglot-eldoc ()
  (setq eldoc-documentation-strategy
        'eldoc-documentation-compose-eagerly))
#+end_src
*** eglot /(built-in)/
Part of core since Emacs 29, so no need to install.

janet-lsp
- continuously displays an error, which may be related to:
  - https://github.com/joaotavora/eglot/issues/597
  - becomes almost unusable due to small freezes

#+begin_src elisp
(use-package eglot
  ;; :hook ((eglot-managed-mode . ph/eglot-eldoc)) 
  :config
  (add-to-list 'eglot-server-programs
               '(janet-ts-mode . ("janet-lsp")))
  
  ;; (add-hook 'janet-ts-mode-hook 'eglot-ensure)

  ;;; Disable documentation-on-hover, which is still accessible with `M-x
  ;;; eldoc':
  ;;; https://github.com/joaotavora/eglot/discussions/691#discussioncomment-719373
  (add-hook 'eglot-managed-mode-hook
	    (lambda () (eldoc-mode -1)))

  ;; (setq eglot-strict-mode nil)

  ;; (add-to-list 'eglot-ignored-server-capabilities :hoverProvider)

  ;; (add-to-list 'eglot-ignored-server-capabilities :inlayHintProvider)
  ;; (add-to-list 'eglot-stay-out-of 'flymake)
  )

#+end_src
** :lang Haskell
*** haskell-mode
#+begin_src elisp
(use-package haskell-mode
  :ensure t)

#+end_src
** :lang Lua
*** lua-mode
#+begin_src elisp
(use-package lua-mode
  :ensure t)

#+end_src

** :lang Clojure
*** cider
#+begin_src elisp
  (use-package cider
    :ensure t
    :config
    (require 'flycheck-clj-kondo)

    ;;; For better editing in camelCase (Java names):
    (add-hook 'cider-repl-mode-hook #'subword-mode)

    ;;; C-[ gets stuck because of Ciders ESC-key prefix, so let’s disable it:
  
    ;;; (define-key cider-mode-map (kbd "ESC") nil)
    (setq cider-preferred-build-tool 'clojure-cli)

    ;;; Use enrich-classpath for better Java lib completions/docs
    (setq cider-enrich-classpath t)  
  
    (setq cider-eval-spinner-type 'moon)
  
    (setq cider-repl-history-size 2000)

    ;;; Don't show cider help text in repl after jack-in
    (setq cider-repl-display-help-banner nil)

    ;;; Show error as overlay instead of the buffer (buffer is generated anyway in
    ;;; case it's needed)
    (setq cider-show-error-buffer 'except-in-repl)
    ;;; If we set `cider-show-error-buffer' to non-nil, don't focus error buffer
    ;;; when error is thrown
    (setq cider-auto-select-error-buffer nil)

    ;; Don't pop to the REPL buffer on connect
    ;; Create and display the buffer, but don't focus it.
    (setq cider-repl-pop-to-buffer-on-connect 'display-only)

    ;;; skip host question on connect
    (defun cider--completing-read-host (hosts)
      '("localhost")))

#+end_src

*** clj-refactor
#+begin_src elisp
  (use-package clj-refactor
    :ensure t
    :after cider
    :config
    ;;; Hook function from https://github.com/clojure-emacs/clj-refactor.el
    (add-hook 'clojure-mode-hook
	      (lambda ()
		(clj-refactor-mode 1)
		(yas-minor-mode 1) ; for adding require/use/import statements
		;; This choice of keybinding leaves cider-macroexpand-1 unbound
		(cljr-add-keybindings-with-prefix "C-c C-m")))

    (dolist (magic-require '(("clerk"    . "nextjournal.clerk")
			     ("csv"      . "clojure.data.csv")
			     ("edn"      . "clojure.edn")
			     ("pprint"   . "clojure.pprint")
			     ("reagent"  . "reagent.core")
			     ("re-frame" . "re-frame.core")))
      (add-to-list 'cljr-magic-require-namespaces magic-require)))

#+end_src

*** +Clerk helper
#+begin_src elisp
;; (defun clerk-show ()
;;   (interactive)
;;   (when-let
;;       ((filename
;;         (buffer-file-name)))
;;     (save-buffer)
;;     (cider-interactive-eval
;;      (concat "(nextjournal.clerk/show! \"" filename "\")"))))

;; (define-key clojure-mode-map (kbd "<M-return>") 'clerk-show)


;; Thanks to user 'dakra' for sharing this config:
;; - https://github.com/nextjournal/clerk/issues/170#issuecomment-1257013793

;; Shortcut for clerk/show
(defun clerk-serve ()
  "Serve clerk notebooks."
  (interactive)
  (let ((port "7777"))
    (cider-interactive-eval (concat
			     "(nextjournal.clerk/serve! {"
			     ":port " port " "
			     ":browse? false})"))
    (ph/browse-url-in-split-window (concat "http://localhost:" port))))

(defun clerk-build ()
  "Build static html for the current clerk notebook."
  (interactive)
  (message "Building static page")
  (when-let ((filename (buffer-file-name)))
    (let ((root (project-root (project-current t))))
      (cider-interactive-eval
       (concat "(nextjournal.clerk/build! {:paths [\""
               (file-relative-name filename root) "\"]})")))))

(defun clerk-show ()
  "Show buffer in clerk."
  (interactive)
  (message "Show buffer in clerk.")
  (when-let ((filename (buffer-file-name)))
    (cider-interactive-eval
     (concat "(nextjournal.clerk/show! \"" filename "\")"))))

(defun clerk-save-and-show ()
  "Save buffer and show in clerk."
  (interactive)
  (save-buffer)
  (clerk-show))

(define-minor-mode clerk-mode
  "A mode that just binds `<M-return>' to `clerk-show'."
  :lighter " clerk"
  :keymap `((,(kbd "<M-return>") . clerk-save-and-show))
  (if clerk-mode
      (add-hook 'after-save-hook #'clerk-show 100 t)
    (remove-hook 'after-save-hook #'clerk-show t)))


(defun ph/buffer-file-parent-dir-name ()
  (interactive)
  (file-name-nondirectory
   (directory-file-name (file-name-directory buffer-file-name))))

(defun activate-hook-for-dir (mode dir-name)
  "Activate `mode` if the directory in which the file resides has `dir-name`."
  (when (string-match-p dir-name (ph/buffer-file-parent-dir-name))
    (funcall mode)))

(add-hook 'find-file-hook
	  (lambda ()
	    (activate-hook-for-dir 'clerk-mode "notebooks")))
#+end_src

** :lang Janet
*** COMMENT janet-mode
#+begin_src elisp
(use-package janet-mode
  :ensure t)

#+end_src
*** janet-ts-mode
#+begin_src elisp
(use-package janet-ts-mode
  :vc (:fetcher github :repo sogaiu/janet-ts-mode)
  :ensure t)

#+end_src
*** ajrepl
#+begin_src elisp
(use-package ajrepl
  :ensure t
  :after janet-ts-mode
  :vc (:fetcher github :repo sogaiu/ajrepl)
  :config
  (add-hook 'janet-ts-mode-hook
            #'ajrepl-interaction-mode))

#+end_src
*** a-janet-spork-client
Janet Spork Netrepl client.
- [[https://github.com/sogaiu/a-janet-spork-client/blob/master/ajsc.el][Instructions]]
- needs [[https://github.com/janet-lang/spork][Spork]] utility library: ~sudo jpm install spork~
- there is also [[https://github.com/sogaiu/snr][snr]] (which I haven’t tested)

1. in console, call:
   : janet -e '(import spork/netrepl) (netrepl/server)'
   (or create/use ~janetrepl~ alias)
2. ~M-x ajsc~ to connect to the nrepl server with specified port

#+begin_src elisp
(use-package ajsc
  :ensure t
  :after (janet-ts-mode ajrepl)
  :vc (:fetcher github :repo sogaiu/a-janet-spork-client)
  :config
  (add-hook 'janet-ts-mode-hook
            #'ajsc-interaction-mode))
#+end_src
** :lang markdown
*** markdown-mode
#+begin_src elisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "pandoc")
  :bind (:map markdown-mode-map
              ("C-c C-e" . markdown-do))
  :config
  (setq markdown-fontify-code-blocks-natively t)
  (dolist (x '(("clj" . clojure-mode)
               ("cljs" . clojure-mode)
               ("cljc" . clojure-mode)))
    (add-to-list 'markdown-code-lang-modes x)))
#+end_src
*** separedit
#+begin_src elisp
(use-package separedit
  :ensure t
  :after markdown-mode
  ;; :init
  :config
  ;; Default major-mode for edit buffer
  ;; can also be other mode e.g. ‘org-mode’.
  (setq separedit-default-mode 'markdown-mode)
  
  ;; Key binding for modes you want edit
  ;; or simply bind ‘global-map’ for all.
  (define-key prog-mode-map        (kbd "C-c '") #'separedit)
  (define-key minibuffer-local-map (kbd "C-c '") #'separedit)
  (define-key help-mode-map        (kbd "C-c '") #'separedit)
  (define-key helpful-mode-map     (kbd "C-c '") #'separedit)
  (define-key clojure-mode-map     (kbd "C-c '") #'separedit)

  ;; Feature options
  ;; (setq separedit-preserve-string-indentation t)
  ;; (setq separedit-continue-fill-column t)
  ;; (setq separedit-write-file-when-execute-save t)
  ;; (setq separedit-remove-trailing-spaces-in-comment t)
  )
#+end_src
** :lang Logo
*** COMMENT logo-mode
Works kind-of, but with multiple issues.
- see: https://www.emacswiki.org/emacs/LogoMode
- overrides Emacs font face/color configs
#+begin_src elisp
(use-package logo-mode
  :ensure t
  :vc (:fetcher github :repo brianharvey/UCBLogo
		;; How to specify source files?
		;; :files ("source/emacs/*" "source/helpfiles/*" "source/docs/*")
		))

#+end_src
** Misc
*** COMMENT persistent-scratch
#+begin_src elisp
(use-package persistent-scratch
  :ensure t
  :config
  (persistent-scratch-autosave-mode 1)
  (setq persistent-scratch--auto-restored t)
  (setq persistent-scratch-backup-directory
	(concat user-emacs-directory "persistent-scratch-backups/"))
  (setq persistent-scratch-backup-filter
	(persistent-scratch-keep-n-newest-backups 100)))
#+end_src
* Customization
** Modifier keys
#+begin_src elisp
(setq mac-command-modifier 'meta)          ;; left cmd = right cmd
(setq mac-right-command-modifier 'left)
(setq mac-option-modifier nil)             ;; keeps Umlauts, etc. accessible
(setq mac-right-option-modifier 'left)
(setq mac-control-modifier 'hyper)         ;; in case hyper is needed
(setq mac-right-control-modifier 'control) ;; also works for caps-lock as ctrl

#+end_src

** Minibuffer / Completion
#+begin_src elisp
;;; Remember history of minibuffer prompts
(setq history-length 25)
(savehist-mode 1)

(setq completions-format 'horizontal)
(setq completion-auto-wrap t) ;; wraps around when navigating completions
(setq completion-auto-help t)
(setq completion-auto-select 'second-tab)
(setq completion-show-help nil) ;; hides help message

(add-hook 'minibuffer-mode-hook
	  (lambda ()
	    (keymap-set minibuffer-mode-map "C-n"
			#'minibuffer-next-completion)
	    (keymap-set minibuffer-mode-map "C-p"
			#'minibuffer-previous-completion)))

(add-hook 'completion-in-region-mode-hook
	  (lambda ()
	    (keymap-set completion-in-region-mode-map "C-n"
			#'minibuffer-next-completion)
	    (keymap-set completion-in-region-mode-map "C-p"
			#'minibuffer-previous-completion)))
 
;;; Completion system
(fido-mode 1)
;; (fido-vertical-mode 1)

;; because M-x <up> is awkward:
(keymap-set icomplete-fido-mode-map "C-r"
	    #'minibuffer-complete-history)
#+end_src

** Visit config file
#+begin_src elisp
(defun ph/visit-init ()
  "Opens the init.el file."
  (interactive)
  (find-file (locate-user-emacs-file "config.org")))

;; (keymap-global-set "C-x c" 'visit-init)
#+end_src

** Text editing
#+begin_src elisp
(defun ph/newline-empty-below ()
  "Creates a newline below the point that is always empty."
  (interactive)
  (let ((beg (point)))
    (move-end-of-line nil)
    (open-line 1)
    (goto-char beg)))

(defun ph/newline-empty-above ()
  "Creates a newline above the point that is always empty."
  (interactive)
  (let ((beg (point)))
    (back-to-indentation)
    (open-line 1)
    (goto-char beg)))

(keymap-global-set "C-}" #'ph/newline-empty-below)
(keymap-global-set "C-{" #'ph/newline-empty-above)


(defun ph/join-with-next-line ()
  "Join the current line with the line after it."
  (interactive)
  (join-line -1))


(defun ph/kill-whole-line-move-prev ()
  "Deletes the current line and moves point back to end of previous line."
  (interactive)
  (kill-whole-line)
  (move-end-of-line 0))

;;; UPDATE: I don’t use the following bindings anymore, because of meow

;;; Feels more like Vims S-j to me and I use this very often:
;;; (note: C-j gets overwritten in Lisp Interactive mode)
;; (keymap-global-set "C-M-j" #'delete-indentation) ;; M-^ is weird to type
;; (keymap-global-set "C-S-j" #'ph/join-with-next-line) ; ? or C-c j

;;; I don’t use these often enough for their prominent keybindings:
;; (keymap-global-set "M-o" #'default-indent-new-line) ;; was C-M-j / M-j
;; (keymap-global-set "M-j" #'electric-newline-and-maybe-indent) ;; was C-j

#+end_src

** Wrap with char
#+begin_src elisp
(defun ph/wrap-with-char (start end)
  "Wraps a region with given input character."
  (interactive "r")
  (let ((char (string-to-char (read-string "Enter character: "))))
    (save-excursion
      (goto-char end)
      (insert-char char)
      (goto-char start)
      (insert-char char))))

(defun ph/change-wrapped-char (start end)
  "Changes wrapping characters in a region with given input character."
  (interactive "r")
  (let ((char (string-to-char (read-string "Enter character: "))))
    (save-excursion
      (goto-char end)
      (delete-char -1)
      (insert-char char)
      (goto-char start)
      (delete-char 1)
      (insert-char char))))
#+end_src
** Shells & Terminals
shell-mode:
#+begin_src elisp
;;; TODO: bind to local key
(defun ph/comint-kill-output ()
  "In shell-mode, kills output instead of deleting, as in
comint-delete-output by default (C-c C-o)."
  (interactive)
  (comint-delete-output t))
#+end_src

eshell:
#+begin_src elisp
(setq eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      ; eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      ; eshell-destroy-buffer-when-process-dies t  ;; WARNING: see variable info
      ; eshell-visual-commands'("bash" "htop" "ssh" "top" "zsh")
      )
#+end_src

** Colors

Find nearest color
Source: https://www.masteringemacs.org/article/find-nearest-colors-emacs-24
#+begin_src elisp
(defun ph/find-nearest-color (color &optional use-hsv)
  "Finds the nearest color by RGB distance to COLOR.

If called with a universal argument (or if USE-HSV is set) use HSV instead of RGB.
Runs \\[list-colors-display] after setting `list-colors-sort'"
  (interactive "sColor: \nP")
  (let ((list-colors-sort `(,(if (or use-hsv current-prefix-arg)
                                 'hsv-dist
                               'rgb-dist) . ,color)))
    (if (color-defined-p color)
        (list-colors-display)
      (error "The color \"%s\" does not exist." color))))

(defun ph/find-nearest-color-at-point (pt)
  "Finds the nearest color at point PT.

If called interactively, PT is the value immediately under `point'."
  (interactive "d")
  (ph/find-nearest-color (with-syntax-table (copy-syntax-table (syntax-table))
                           ;; turn `#' into a word constituent to help
                           ;; `thing-at-point' find HTML color codes.
                           (modify-syntax-entry ?# "w")
                           (thing-at-point 'word))))
#+end_src

** Windows
#+begin_src elisp
;; (defun window-full ()
;;   (interactive)
;;   (enlarge-window 1))

;;; inspired from https://www.masteringemacs.org/article/my-emacs-keybindings
(keymap-global-set "M-o" #'other-window)
;;; get rid of the annoying frame minimize command
(keymap-global-set "C-z" nil) 

;; (keymap-global-set "C-J" #'shrink-window-horizontally)
;; (keymap-global-set "C-L" #'enlarge-window-horizontally)
;; (keymap-global-set "C-I" #'enlarge-window)
;; (keymap-global-set "C-K" #'shrink-window)
#+end_src

** Dired
#+begin_src elisp
;;; Source: https://gist.github.com/rmuslimov/72bf5a1561c7b60eb535
(setq
 ph/scripts-dired-reveal-in-finder
 "tell application \"Finder\"
  reveal POSIX file \"%s\"
  activate
end tell")

(defun ph/dired-reveal-in-finder ()
  "In Dired, reveal the location of the file/directory under cursor in Finder."
  (interactive)
  (let* ((filename (dired-get-file-for-visit))
         (cmd (format ph/scripts-dired-reveal-in-finder filename)))
    (do-applescript cmd)))

(keymap-set dired-mode-map "r" #'ph/dired-reveal-in-finder)

(defun ph/dired-open-in-finder ()
  "In Dired, open the file/directory under the cursor in Finder."
  (interactive)
  (let ((file-name (dired-get-file-for-visit)))
    (if (file-exists-p file-name)
        (shell-command (concat "open" " " file-name))
      (message "File does not exist!"))))

(keymap-set dired-mode-map "O" #'ph/dired-open-in-finder)
#+end_src

** Popup windows & Help buffers
? not needed anymore due to popwin, maybe delete
#+begin_src elisp
(defun ph/close-all-popups ()
  "Closes all open popup windows."
  (interactive)
  (dolist (window (window-list))
    (when (window-parameter window 'popup)
      (delete-window window))))

(defun ph/kill-all-help-buffers ()
  "Closes all open help buffers."
  (interactive)
  (let ((buffers (cl-remove-if-not
                  (lambda (b) (string-prefix-p "*Help" (buffer-name b) t))
                  (buffer-list))))
    (dolist (buf buffers)
      (when (buffer-live-p buf)
        (when (get-buffer-window buf)
          ;; Delete window if more than one window is open
          (when (> (length (window-list)) 1)
            (delete-window (get-buffer-window buf))))
        (kill-buffer buf)))))

;; (keymap-global-set "C-`" #'ph/kill-all-help-buffers)
#+end_src

** xwidget-webkit
#+begin_src elisp
(add-hook 'xwidget-webkit-mode-hook
	  (lambda ()
	    (display-line-numbers-mode 0)))

(defun ph/browse-url-in-split-window (url)
  (interactive "sEnter URL: ")
  (let ((buffer (generate-new-buffer "+xwidget-webkit*")))
    (set-frame-size nil 210 (frame-height))
    (split-window-right)
    (other-window 1)
    (let* ((pixel-size 980)
	   (desired-char-width (/ pixel-size (frame-char-width)))
	   (delta (- desired-char-width (window-total-width))))
      (when (> delta 0)
	(window-resize nil delta t))
      (switch-to-buffer buffer)
      ;; (setq window-size-fixed 'width)
      (xwidget-webkit-browse-url url))))

(defun ph/set-frame-size-xwidget-webkit-split ()
  (interactive)
  (set-frame-size nil 210 (frame-height)))


#+end_src

** Misc
Increment/decrement numbers like in Vim:
- see https://www.emacswiki.org/emacs/IncrementNumber
#+begin_src elisp
(defun ph/change-number-at-point (change increment)
  (let ((number (number-at-point))
        (point (point)))
    (when number
      (progn
        (forward-word)
        (search-backward (number-to-string number))
        (replace-match (number-to-string (funcall change number increment)))
        (goto-char point)))))

(defun ph/increment-number-at-point (&optional increment)
  "Increment number at point like vim's C-a"
  (interactive "p")
  (ph/change-number-at-point '+ (or increment 1)))

(defun ph/decrement-number-at-point (&optional increment)
  "Decrement number at point like vim's C-x"
  (interactive "p")
  (ph/change-number-at-point '- (or increment 1)))

(keymap-global-set "C-c +" #'ph/increment-number-at-point)
(keymap-global-set "C-c -" #'ph/decrement-number-at-point)
#+end_src

* Appearance
** Fonts
#+begin_src elisp
(set-face-attribute 'default nil
                    :font "Berkeley Mono"
                    :height 130 ;; 12 pt
                    :weight 'regular)

(set-face-attribute 'variable-pitch nil
                    :font "Cambria"
                    :height 120
                    :weight 'regular)

(set-face-attribute 'fixed-pitch nil
                    :font "Berkeley Mono"
                    :height 130
                    :weight 'regular)

(set-face-attribute 'font-lock-comment-face nil
                    :slant 'italic)

(set-face-attribute 'font-lock-keyword-face nil
                    :slant 'normal)

(setq-default line-spacing 0.12)
#+end_src

** Theme
#+begin_src elisp
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes"))
(load-theme 'pmacs t)
#+end_src

* TODO

To practice:
- [ ] OrgMode bindings
- [ ] leader-key bindings

To learn:
- [ ] how does Yasnippet work and is it useful?
- [ ] CIDER
- [ ] how to pin packages to specific versions?
  - https://www.reddit.com/r/emacs/comments/qrythw/pin_a_specific_version_of_a_package/
  - use https://github.com/quelpa/quelpa ?

Packages to try:
- [ ] Swiper (depends on ivy) for isearch with regex
- [ ] sudo-edit if need arises to use sudo to open files
- [ ] consider vterm instead of ~M-x shell~
  - seems to be compiled instead of elisp -> faster
  - see [[https://gitlab.com/dwt1/configuring-emacs/-/blob/main/03-shells-terms-and-theming/config.org?ref_type=heads#vterm][DistroTube]] for config
  - also install vterm-toggle
- [ ] does dump-jump (installed) work?
- [ ] org-babel-clojure for Clojure eval in org-mode comments
  - https://orgmode.org/worg//org-contrib/babel/languages/ob-doc-clojure.html
- [ ] neil  
- [ ] html-to-hiccup
- [ ] flycheck-color-mode-line.el
  
